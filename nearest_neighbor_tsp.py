from random import randint


city5 = [[0.00, 6.08, 11.00, 10.20, 9.22],
        [6.08, 0.00, 13.42, 5.00, 12.81],
        [11.00, 13.42, 0.00, 13.45, 2.83],
        [10.20, 5.00, 13.45, 0.00, 13.89],
        [9.22, 12.81, 2.83, 13.89, 0.00]]

city15 = [[0.00, 6.08, 11.00, 10.20, 9.22, 10.05, 12.37, 13.89, 12.17, 3.16, 5.10, 7.07, 13.42, 13.60, 1.41],
        [6.08, 0.00, 13.42, 5.00, 12.81, 13.04, 13.34, 13.04, 13.60, 3.00, 1.00, 1.00, 13.00, 12.17, 5.00],
        [11.00, 13.42, 0.00, 13.45, 2.83, 1.41, 3.16, 7.07, 2.24, 12.37, 13.00, 13.89, 6.08, 8.00, 12.04],
        [10.20, 5.00, 13.45, 0.00, 13.89, 13.60, 12.21, 10.44, 12.81, 7.62, 5.83, 4.24, 10.77, 9.22, 9.49],
        [9.22, 12.81, 2.83, 13.89, 0.00, 1.41, 5.83, 9.49, 5.00, 11.18, 12.21, 13.45, 8.54, 10.20, 10.44],
        [10.05, 13.04, 1.41, 13.60, 1.41, 0.00, 4.47, 8.25, 3.61, 11.70, 12.53, 13.60, 7.28, 9.06, 11.18],
        [12.37, 13.34, 3.16, 12.21, 5.83, 4.47, 0.00, 4.00, 1.00, 13.00, 13.15, 13.60, 3.00, 5.10, 13.15],
        [13.89, 13.04, 7.07, 10.44, 9.49, 8.25, 4.00, 0.00, 5.00, 13.60, 13.15, 13.00, 1.00, 1.41, 14.32],
        [12.17, 13.60, 2.24, 12.81, 5.00, 3.61, 1.00, 5.00, 0.00, 13.04, 13.34, 13.93, 4.00, 6.08, 13.04],
        [3.16, 3.00, 12.37, 7.62, 11.18, 11.70, 13.00, 13.60, 13.04, 0.00, 2.00, 4.00, 13.34, 13.00, 2.00],
        [5.10, 1.00, 13.00, 5.83, 12.21, 12.53, 13.15, 13.15, 13.34, 2.00, 0.00, 2.00, 13.04, 12.37, 4.00],
        [7.07, 1.00, 13.89, 4.24, 13.45, 13.60, 13.60, 13.00, 13.93, 4.00, 2.00, 0.00, 13.04, 12.04, 6.00],
        [13.42, 13.00, 6.08, 10.77, 8.54, 7.28, 3.00, 1.00, 4.00, 13.34, 13.04, 13.04, 0.00, 2.24, 13.93],
        [13.60, 12.17, 8.00, 9.22, 10.20, 9.06, 5.10, 1.41, 6.08, 13.00, 12.37, 12.04, 2.24, 0.00, 13.89],
        [1.41, 5.00, 12.04, 9.49, 10.44, 11.18, 13.15, 14.32, 13.04, 2.00, 4.00, 6.00, 13.93, 13.89, 0.00]]

def nearest_neighbor_method():
    start = [] * len(city)
    pop = []
    start.insert(0, randint(0, N-1))
    #start.insert(0, 4)
    t = 0
    total_distans = 0.0
    for i in range(0, N):
        print(f"Step № {i+1}")
        print(f"    Crawl number {i+1}")
        print(f"    City {start[i] + 1}")
        for element in start:
            pop.append(element + 1)
        print(f"    {pop}")
        pop.clear()
        if i > 0:    
            print(f"    Distance = {minval/100}")
            total_distans += minval
            print(f"    Total distans = {total_distans/100}")
        minval = max(max(city, key = max)) * 100
        for j in range(0, N):
            if (minval/100 - city[start[i]][j]) == abs(minval/100 - city[start[i]][j]) and j not in start: #сравнение float переменных
                minval = city[start[i]][j] * 100
                t = j
            if j == N - 1:   
                start.insert(i+1, t)
            if i == N-1 and j == 0:
                total_distans += (city[start[i]][start[0]]) * 100
                print(f"Step № {i+2}")
                print(f"    Total distans = {total_distans/100}")

sel = 0
while sel != 5 and sel != 15:
    print("Selection of matrix 5X5 or 15X15")
    print("Enter your select 5 or 15")
    sel = int(input())
    if sel != 5 and sel != 15:
        print("ERROR")
if sel == 5:
    city = city5
elif sel == 15:
    city = city15

N = len(city)
nearest_neighbor_method() 
